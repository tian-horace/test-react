import { type FilenameConfig, type MultiStats, type NormalizedConfig, type RsbuildTarget, type Rspack, type RspackChain, type Stats } from '@rsbuild/shared';
import type { StatsCompilation, StatsValue } from '@rspack/core';
import type { Compiler as WebpackCompiler, MultiCompiler as WebpackMultiCompiler } from 'webpack';
export declare const rspackMinVersion = "0.6.2";
export declare const isSatisfyRspackVersion: (originalVersion: string) => Promise<boolean>;
export declare const getCompiledPath: (packageName: string) => string;
export declare const getAllStatsErrors: (statsData: StatsCompilation) => Rspack.StatsError[] | undefined;
export declare const getAllStatsWarnings: (statsData: StatsCompilation) => Rspack.StatsError[] | undefined;
export declare function getStatsOptions(compiler: Parameters<typeof isMultiCompiler>[0]): StatsValue | undefined;
export declare function formatStats(stats: Stats | MultiStats, options?: StatsValue): {
    message: string;
    level: string;
} | {
    message?: undefined;
    level?: undefined;
};
export declare const removeLeadingSlash: (s: string) => string;
export declare const removeTailingSlash: (s: string) => string;
export declare const addTrailingSlash: (s: string) => string;
export declare const formatPublicPath: (publicPath: string, withSlash?: boolean) => string;
export declare const getPublicPathFromChain: (chain: RspackChain, withSlash?: boolean) => string;
/**
 * ensure absolute file path.
 * @param base - Base path to resolve relative from.
 * @param filePath - Absolute or relative file path.
 * @returns Resolved absolute file path.
 */
export declare const ensureAbsolutePath: (base: string, filePath: string) => string;
export declare const isFileSync: (filePath: string) => boolean | undefined;
export declare function isEmptyDir(path: string): boolean;
/**
 * Find first already exists file.
 * @param files - Absolute file paths with extension.
 * @returns The file path if exists, or false if no file exists.
 */
export declare const findExists: (files: string[]) => string | false;
export declare function isFileExists(file: string): Promise<boolean>;
export declare const canParse: (url: string) => boolean;
export declare const ensureAssetPrefix: (url: string, assetPrefix: string) => string;
export declare function getFilename(config: NormalizedConfig, type: 'js', isProd: boolean): NonNullable<FilenameConfig['js']>;
export declare function getFilename(config: NormalizedConfig, type: Exclude<keyof FilenameConfig, 'js'>, isProd: boolean): string;
export declare function partition<T>(array: T[], predicate: (value: T) => boolean): [T[], T[]];
export declare const applyToCompiler: (compiler: Rspack.Compiler | Rspack.MultiCompiler, apply: (c: Rspack.Compiler) => void) => void;
export declare const upperFirst: (str: string) => string;
export declare function debounce<T extends (...args: any[]) => void>(func: T, wait: number): (...args: Parameters<T>) => void;
export declare const isURL: (str: string) => boolean;
export declare const createVirtualModule: (content: string) => string;
export declare const isRegExp: (obj: any) => obj is RegExp;
export declare function isWebTarget(target: RsbuildTarget | RsbuildTarget[]): boolean;
export declare const isMultiCompiler: <C extends Rspack.Compiler | WebpackCompiler = Rspack.Compiler, M extends Rspack.MultiCompiler | WebpackMultiCompiler = Rspack.MultiCompiler>(compiler: C | M) => compiler is M;
export declare const onCompileDone: (compiler: Rspack.Compiler | Rspack.MultiCompiler, onDone: (stats: Stats | MultiStats) => Promise<void>, MultiStatsCtor: new (stats: Stats[]) => MultiStats) => void;
export declare function pick<T, U extends keyof T>(obj: T, keys: ReadonlyArray<U>): Pick<T, U>;
