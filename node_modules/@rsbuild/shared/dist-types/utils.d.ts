import type { Compiler } from '@rspack/core';
import deepmerge from '../compiled/deepmerge/index.js';
import color from '../compiled/picocolors/index.js';
import type { CacheGroups, ModifyChainUtils, NodeEnv, NormalizedConfig, RsbuildTarget } from './types';
export { color, deepmerge };
export type Colors = Omit<keyof typeof color, 'createColor' | 'isColorSupported'>;
export declare const getNodeEnv: () => NodeEnv;
export declare const setNodeEnv: (env: NodeEnv) => void;
export declare const isDev: () => boolean;
export declare const isProd: () => boolean;
export declare const isFunction: (func: unknown) => func is (...args: any[]) => any;
export declare const isObject: (obj: unknown) => obj is Record<string, any>;
export declare const isPlainObject: (obj: unknown) => obj is Record<string, any>;
export declare const isNil: (o: unknown) => o is null | undefined;
export declare const getCoreJsVersion: (corejsPkgPath: string) => string;
export declare const castArray: <T>(arr?: T | T[]) => T[];
export declare const cloneDeep: <T>(value: T) => T;
/** Expect to match path just like "./node_modules/react-router/" */
export declare const createDependenciesRegExp: (...dependencies: (string | RegExp)[]) => RegExp;
export declare function createCacheGroups(group: Record<string, (string | RegExp)[]>): CacheGroups;
export declare const getPublicPathFromCompiler: (compiler: Compiler) => string;
export declare const prettyTime: (seconds: number) => string;
export declare const isHtmlDisabled: (config: NormalizedConfig, target: RsbuildTarget) => boolean;
export declare function isUsingHMR(config: NormalizedConfig, { isProd, target }: Pick<ModifyChainUtils, 'isProd' | 'target'>): boolean;
